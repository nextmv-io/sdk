# Options for analysis running. Details: https://golangci-lint.run/usage/configuration/#run-configuration
run:
  timeout: 5m
  go: "1.19"

# Configures linters. Details: https://golangci-lint.run/usage/linters
linters-settings:
  # Pick up duplicate code after severe repetition.
  dupl:
    threshold: 200
  # Only allow certain modules to be imported.
  gomodguard:
    allowed:
      modules:
        - github.com/nextmv-io/sdk
        - github.com/nextmv-io/sdk/route
        - github.com/nextmv-io/sdk/route/osrm
        - github.com/nextmv-io/sdk/route/here
        - github.com/nextmv-io/sdk/route/google
        - github.com/nextmv-io/sdk/route/routingkit
        - googlemaps.github.io/maps
        - github.com/dgraph-io/ristretto
        - github.com/golang/mock
        - github.com/google/go-cmp
        - github.com/hashicorp/golang-lru
        - github.com/nextmv-io/go-routingkit
        - github.com/twpayne/go-polyline
        - googlemaps.github.io/maps
        - github.com/itzg/go-flagsfiller
        - github.com/gorilla/schema
        - github.com/google/uuid
  # Functions cannot exceed this cyclomatic complexity.
  gocyclo:
    min-complexity: 10
  # Set correct go version.
  gofumpt:
    lang-version: "1.19"
  gosimple:
    go: "1.19"
  staticcheck:
    go: "1.19"
  stylecheck:
    go: "1.19"
  # Check case of struct tags
  tagliatelle:
    case:
      use-field-name: true
      rules:
        json: snake
  # Check line length
  lll:
    line-length: 80

# Specifies which linters are enabled. Full list: https://golangci-lint.run/usage/linters/
linters:
  # Some linters are just too strict.
  disable-all: true
  enable:
    # Checks whether HTTP response body is closed successfully.
    - bodyclose
    # containedctx is a linter that detects struct contained context.Context field.
    - containedctx
    # Check the function whether use a non-inherited context.
    - contextcheck
    # Finds unused code. WARN [runner] The linter 'deadcode' is deprecated
    # (since v1.49.0) due to: The owner seems to have abandoned the linter.
    # Replaced by unused.
    # - deadcode
    # check declaration order and count of types, constants, variables and functions.
    - decorder
    # Checks assignments with too many blank identifiers (e.g. x, , , _, := f())
    - dogsled
    # Tool for code clone detection
    - dupl
    # Errcheck is a program for checking for unchecked errors in go programs.
    # These unchecked errors can be critical bugs in some cases.
    - errcheck
    # Gci controls golang package import order and makes it always deterministic.
    - gci
    # Finds repeated strings that could be replaced by a constant.
    - goconst
    # Provides diagnostics that check for bugs, performance and style issues.
    # Extensible without recompilation through dynamic rules. Dynamic rules are
    # written declaratively with AST patterns, filters, report message and
    # optional suggestion.
    - gocritic
    # Computes and checks the cyclomatic complexity of functions.
    - gocyclo
    # Check if comments end in a period.
    - godot
    # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s
    # option to check for code simplification.
    - gofmt
    # Gofumpt checks whether code was gofumpt-ed.
    - gofumpt
    # In addition to fixing imports, goimports also formats your code in the
    # same style as gofmt.
    - goimports
    # Allow and block list linter for direct Go module dependencies. This is
    # different from depguard where there are different block types for example
    # version constraints and module recommendations.
    - gomodguard
    # Linter for Go source code that specializes in simplifying a code.
    - gosimple
    # Vet examines Go source code and reports suspicious constructs, such as
    # Printf calls whose arguments do not align with the format string.
    - govet
    # Enforces consistent import aliases.
    - importas
    # Detects when assignments to existing variables are not used.
    - ineffassign
    # Reports long lines.
    - lll
    # Finds commonly misspelled English words in comments.
    - misspell
    # Finds naked returns in functions greater than a specified function length.
    - nakedret
    # Reports deeply nested if statements.
    - nestif
    # Finds the code that returns nil even if it checks that the error is not nil.
    - nilerr
    # noctx finds sending http request without context.Context.
    - noctx
    # Finds slice declarations that could potentially be preallocated.
    - prealloc
    # Find code that shadows one of Go's predeclared identifiers.
    - predeclared
    # Fast, configurable, extensible, flexible, and beautiful linter for Go.
    # Drop-in replacement of golint.
    - revive
    # Staticcheck is a go vet on steroids, applying a ton of static analysis checks.
    - staticcheck
    # Finds unused struct fields. WARN [runner] The linter 'structcheck' is
    # deprecated (since v1.49.0) due to: The owner seems to have abandoned the
    # linter.  Replaced by unused.
    # - structcheck
    # Stylecheck is a replacement for golint.
    - stylecheck
    # Checks the struct tags.
    - tagliatelle
    # Like the front-end of a Go compiler, parses and type-checks Go code.
    - typecheck
    # Remove unnecessary type conversions.
    - unconvert
    # Reports unused function parameters.
    - unparam
    # Checks Go code for unused constants, variables, functions and types.
    - unused
    # Finds unused global variables and constants. WARN [runner] The linter
    # 'varcheck' is deprecated (since v1.49.0) due to: The owner seems to have
    # abandoned the linter.  Replaced by unused.
    # - varcheck
    # wastedassign finds wasted assignment statements.
    - wastedassign
    # Tool for detection of leading and trailing whitespace.
    - whitespace

# List of regexps of issue texts to exclude. Details: https://golangci-lint.run/usage/configuration/#issues-configuration
issues:
  # Disable default exclude patterns to surface commonly-ignored linting errors.
  exclude-use-default: false
  exclude-rules:
    # Many individual router tests use the same base and this implies
    # duplication. The code is not abstracted into a single function to keep the
    # testable examples in a nice compact format with all information provided in
    # a single snippet.
    - path: route/example_option_test\.go
      linters:
        - dupl
    - path: route/example_router_test\.go
      linters:
        - dupl

    # Complexity in LessClockwise is high due to multiple cases, fine for now.
    - path: measure/sort\.go
      linters:
        - gocyclo

    # Complexity in TestBin is high due to multiple cases, fine for now.
    - path: measure/bin_test\.go
      linters:
        - gocyclo
    # Deactivate line length in solver.go because of go tags
    - path: nextroute/solver\.go
      linters:
        - lll
    # Deactivate line length in solver_parallel.go because of go tags
    - path: nextroute/solver_parallel\.go
      linters:
        - lll
    # Deactivate gocyclo in router.go due to many if statements.
    - path: nextroute/schema/router\.go
      linters:
        - gocyclo
    # Deactivate lll in schema due to go tags.
    - path: nextroute/schema
      linters:
        - lll
    # Deactivate lll in route/example_option_test.go
    - path: route/example_option_test\.go
      linters:
        - lll
      # Deactivate lll in route/router.go
    - path: route/router\.go
      linters:
        - lll
    # Deactivate line length in model.go because of go tags
    - path: nextroute/model\.go
      linters:
        - lll
    # Deactivate line length in factory/model.go because of go tags
    - path: nextroute/factory/model\.go
      linters:
        - lll
    # Complexity in NewAlias is high due to multiple cases, fine for now.
    - path: nextroute/common/alias\.go
      linters:
        - gocyclo
    # Complexity in statistics is high due to multiple cases, fine for now.
    - path: nextroute/common/statistics\.go
      linters:
        - gocyclo
    - path: nextroute/common/statistics_test\.go
      linters:
        - gocyclo
    - path: nextroute/common/nsmallest_test\.go
      linters:
        - gocyclo
    # Complexity in UnmarshalJSON is high due to multiple cases, fine for now.
    - path: route/load\.go
      linters:
        - gocyclo
      text: ByIndexLoader

    # Tag should be 'measure' in both cases ByPoint and ByIndex
    - path: route/load\.go
      linters:
        - tagliatelle
      text: measure

    # Complex nested block nesting is fine for now.
    - path: alns/solver\.go
      linters:
        - nestif

    # Please note that other Go modules have issues that are ignored but are
    # not listed here. The reason is that linting must be done standing on the
    # Go module and excluding issues here uses relative paths. That means that
    # the relative paths from this file start from the root of sdk but for
    # other modules the relative path start from that module. For that reason,
    # linting is ignored by using the following syntax on a line: //nolint. If
    # you look for uses of //nolint you will find the other linting issues
    # being excluided.

    # TODO: fix cyclomatic complexity issues on these templates. This linter is
    # ignored for expediency.
    - path: templates/cloud-routing/helper\.go
      linters:
        - gocyclo
    - path: templates/cloud-routing/schema\.go
      linters:
        - gocyclo
    - path: templates/cloud-routing/solver\.go
      linters:
        - gocyclo
    - path: templates/routing-informs/helper\.go
      linters:
        - gocyclo
    - path: templates/routing-informs/schema\.go
      linters:
        - gocyclo
    - path: templates/routing-informs/main\.go
      linters:
        - gocyclo
    - path: templates/pager-duty/main\.go
      linters:
        - gocyclo
    - path: templates/shift-scheduling/main\.go
      linters:
        - gocyclo
    - path: templates/sudoku/main\.go
      linters:
        - gocyclo
    - path: templates/unique-matrix-measure/main\.go
      linters:
        - gocyclo

    # TODO: figure out a better way to Marshal to JSON with some sort of error
    # checking.
    - path: templates/cloud-routing/schema\.go
      linters:
        - unparam
      text: cloudDuration

    # The linter suggests switching an if-elseif-else statement to use switch.
    # This is not reasonable right now because the conditions are complex.
    - path: templates/cloud-routing/helper\.go
      linters:
        - gocritic
      text: ifElseChain
    - path: templates/routing-informs/helper\.go
      linters:
        - gocritic
      text: ifElseChain
      
    - path: templates/cluster-tsp/schema\.go
      linters:
        - unparam
      text: cloudDuration

    # The linter suggests switching an if-elseif-else statement to use switch.
    # This is not reasonable right now because the conditions are complex.
    - path: templates/cluster-tsp/helper\.go
      linters:
        - gocritic
      text: ifElseChain

    # Deactivating gocritic because of a gocritic bug that was fixed on October
    # 6th, but the fix has not yet been released
    # https://github.com/go-critic/go-critic/pull/1273
    - path: run/run\.go
      linters:
        - gocritic
      text: newDeref
    # Deactivate gocyclo for CustomEncoder in run.go
    - path: run/encoder\.go
      linters:
        - gocyclo
      source: ^func \(g \*genericEncoder.*$
    # Deactivate line length in http_runner_config.go because of go tags
    - path: run/http_runner_config\.go
      linters:
        - lll
    # Deactivate gocyclo for GenericRunner in generic_runner.go
    - path: run/generic_runner\.go
      linters:
        - gocyclo
      source: ^func \(r \*genericRunner.*$

